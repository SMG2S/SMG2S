# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_smg2s')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_smg2s')
    _smg2s = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_smg2s', [dirname(__file__)])
        except ImportError:
            import _smg2s
            return _smg2s
        try:
            _mod = imp.load_module('_smg2s', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _smg2s = swig_import_helper()
    del swig_import_helper
else:
    import _smg2s
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smg2s.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _smg2s.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _smg2s.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _smg2s.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _smg2s.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _smg2s.SwigPyIterator_equal(self, x)

    def copy(self):
        return _smg2s.SwigPyIterator_copy(self)

    def next(self):
        return _smg2s.SwigPyIterator_next(self)

    def __next__(self):
        return _smg2s.SwigPyIterator___next__(self)

    def previous(self):
        return _smg2s.SwigPyIterator_previous(self)

    def advance(self, n):
        return _smg2s.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _smg2s.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _smg2s.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _smg2s.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _smg2s.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _smg2s.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _smg2s.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _smg2s.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NilpotencyInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NilpotencyInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NilpotencyInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["diagPosition"] = _smg2s.NilpotencyInt_diagPosition_set
    __swig_getmethods__["diagPosition"] = _smg2s.NilpotencyInt_diagPosition_get
    if _newclass:
        diagPosition = _swig_property(_smg2s.NilpotencyInt_diagPosition_get, _smg2s.NilpotencyInt_diagPosition_set)
    __swig_setmethods__["nbOne"] = _smg2s.NilpotencyInt_nbOne_set
    __swig_getmethods__["nbOne"] = _smg2s.NilpotencyInt_nbOne_get
    if _newclass:
        nbOne = _swig_property(_smg2s.NilpotencyInt_nbOne_get, _smg2s.NilpotencyInt_nbOne_set)
    __swig_setmethods__["matrix_size"] = _smg2s.NilpotencyInt_matrix_size_set
    __swig_getmethods__["matrix_size"] = _smg2s.NilpotencyInt_matrix_size_get
    if _newclass:
        matrix_size = _swig_property(_smg2s.NilpotencyInt_matrix_size_get, _smg2s.NilpotencyInt_matrix_size_set)
    __swig_setmethods__["nilpotency"] = _smg2s.NilpotencyInt_nilpotency_set
    __swig_getmethods__["nilpotency"] = _smg2s.NilpotencyInt_nilpotency_get
    if _newclass:
        nilpotency = _swig_property(_smg2s.NilpotencyInt_nilpotency_get, _smg2s.NilpotencyInt_nilpotency_set)
    __swig_setmethods__["setup"] = _smg2s.NilpotencyInt_setup_set
    __swig_getmethods__["setup"] = _smg2s.NilpotencyInt_setup_get
    if _newclass:
        setup = _swig_property(_smg2s.NilpotencyInt_setup_get, _smg2s.NilpotencyInt_setup_set)

    def __init__(self, *args):
        this = _smg2s.new_NilpotencyInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NilpType1(self, num, size):
        return _smg2s.NilpotencyInt_NilpType1(self, num, size)

    def NilpType2(self, num, size):
        return _smg2s.NilpotencyInt_NilpType2(self, num, size)
    __swig_destroy__ = _smg2s.delete_NilpotencyInt
    __del__ = lambda self: None
NilpotencyInt_swigregister = _smg2s.NilpotencyInt_swigregister
NilpotencyInt_swigregister(NilpotencyInt)

class MatrixCSRDoubleInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixCSRDoubleInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixCSRDoubleInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nrows"] = _smg2s.MatrixCSRDoubleInt_nrows_set
    __swig_getmethods__["nrows"] = _smg2s.MatrixCSRDoubleInt_nrows_get
    if _newclass:
        nrows = _swig_property(_smg2s.MatrixCSRDoubleInt_nrows_get, _smg2s.MatrixCSRDoubleInt_nrows_set)
    __swig_setmethods__["nnz"] = _smg2s.MatrixCSRDoubleInt_nnz_set
    __swig_getmethods__["nnz"] = _smg2s.MatrixCSRDoubleInt_nnz_get
    if _newclass:
        nnz = _swig_property(_smg2s.MatrixCSRDoubleInt_nnz_get, _smg2s.MatrixCSRDoubleInt_nnz_set)
    __swig_setmethods__["ncols"] = _smg2s.MatrixCSRDoubleInt_ncols_set
    __swig_getmethods__["ncols"] = _smg2s.MatrixCSRDoubleInt_ncols_get
    if _newclass:
        ncols = _swig_property(_smg2s.MatrixCSRDoubleInt_ncols_get, _smg2s.MatrixCSRDoubleInt_ncols_set)
    __swig_setmethods__["rows"] = _smg2s.MatrixCSRDoubleInt_rows_set
    __swig_getmethods__["rows"] = _smg2s.MatrixCSRDoubleInt_rows_get
    if _newclass:
        rows = _swig_property(_smg2s.MatrixCSRDoubleInt_rows_get, _smg2s.MatrixCSRDoubleInt_rows_set)
    __swig_setmethods__["cols"] = _smg2s.MatrixCSRDoubleInt_cols_set
    __swig_getmethods__["cols"] = _smg2s.MatrixCSRDoubleInt_cols_get
    if _newclass:
        cols = _swig_property(_smg2s.MatrixCSRDoubleInt_cols_get, _smg2s.MatrixCSRDoubleInt_cols_set)
    __swig_setmethods__["vals"] = _smg2s.MatrixCSRDoubleInt_vals_set
    __swig_getmethods__["vals"] = _smg2s.MatrixCSRDoubleInt_vals_get
    if _newclass:
        vals = _swig_property(_smg2s.MatrixCSRDoubleInt_vals_get, _smg2s.MatrixCSRDoubleInt_vals_set)

    def __init__(self, *args):
        this = _smg2s.new_MatrixCSRDoubleInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _smg2s.delete_MatrixCSRDoubleInt
    __del__ = lambda self: None

    def GetValue(self, row, col):
        return _smg2s.MatrixCSRDoubleInt_GetValue(self, row, col)

    def SetValue(self, row, col, val):
        return _smg2s.MatrixCSRDoubleInt_SetValue(self, row, col, val)

    def InsertValue(self, row, col, val):
        return _smg2s.MatrixCSRDoubleInt_InsertValue(self, row, col, val)

    def Add(self, m):
        return _smg2s.MatrixCSRDoubleInt_Add(self, m)

    def Free(self):
        return _smg2s.MatrixCSRDoubleInt_Free(self)
MatrixCSRDoubleInt_swigregister = _smg2s.MatrixCSRDoubleInt_swigregister
MatrixCSRDoubleInt_swigregister(MatrixCSRDoubleInt)

class parVectorMapInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parVectorMapInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parVectorMapInt, name)
    __repr__ = _swig_repr

    def __init__(self, ncomm, lbound, ubound):
        this = _smg2s.new_parVectorMapInt(ncomm, lbound, ubound)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _smg2s.delete_parVectorMapInt
    __del__ = lambda self: None

    def GetCurrentComm(self):
        return _smg2s.parVectorMapInt_GetCurrentComm(self)

    def Loc2Glob(self, local_index):
        return _smg2s.parVectorMapInt_Loc2Glob(self, local_index)

    def Glob2Loc(self, global_index):
        return _smg2s.parVectorMapInt_Glob2Loc(self, global_index)

    def GetOwner(self, index):
        return _smg2s.parVectorMapInt_GetOwner(self, index)

    def GetRank(self):
        return _smg2s.parVectorMapInt_GetRank(self)

    def GetLowerBound(self):
        return _smg2s.parVectorMapInt_GetLowerBound(self)

    def GetUpperBound(self):
        return _smg2s.parVectorMapInt_GetUpperBound(self)

    def GetLocalSize(self):
        return _smg2s.parVectorMapInt_GetLocalSize(self)

    def GetGlobalSize(self):
        return _smg2s.parVectorMapInt_GetGlobalSize(self)

    def GetLocTotSize(self):
        return _smg2s.parVectorMapInt_GetLocTotSize(self)

    def AddUser(self):
        return _smg2s.parVectorMapInt_AddUser(self)

    def DeleteUser(self):
        return _smg2s.parVectorMapInt_DeleteUser(self)

    def GetUser(self):
        return _smg2s.parVectorMapInt_GetUser(self)
parVectorMapInt_swigregister = _smg2s.parVectorMapInt_swigregister
parVectorMapInt_swigregister(parVectorMapInt)

class parVectorDoubleInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parVectorDoubleInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parVectorDoubleInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _smg2s.new_parVectorDoubleInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _smg2s.delete_parVectorDoubleInt
    __del__ = lambda self: None

    def GetVecMap(self):
        return _smg2s.parVectorDoubleInt_GetVecMap(self)

    def GetLowerBound(self):
        return _smg2s.parVectorDoubleInt_GetLowerBound(self)

    def GetUpperBound(self):
        return _smg2s.parVectorDoubleInt_GetUpperBound(self)

    def GetGlobalSize(self):
        return _smg2s.parVectorDoubleInt_GetGlobalSize(self)

    def GetLocalSize(self):
        return _smg2s.parVectorDoubleInt_GetLocalSize(self)

    def GetArraySize(self):
        return _smg2s.parVectorDoubleInt_GetArraySize(self)

    def GetArray(self):
        return _smg2s.parVectorDoubleInt_GetArray(self)

    def Loc2Glob(self, local_index):
        return _smg2s.parVectorDoubleInt_Loc2Glob(self, local_index)

    def Glob2Loc(self, global_index):
        return _smg2s.parVectorDoubleInt_Glob2Loc(self, global_index)

    def AddValueLocal(self, row, value):
        return _smg2s.parVectorDoubleInt_AddValueLocal(self, row, value)

    def AddValuesLocal(self, nindex, rows, values):
        return _smg2s.parVectorDoubleInt_AddValuesLocal(self, nindex, rows, values)

    def SetValueLocal(self, row, value):
        return _smg2s.parVectorDoubleInt_SetValueLocal(self, row, value)

    def SetValuesLocal(self, nindex, rows, values):
        return _smg2s.parVectorDoubleInt_SetValuesLocal(self, nindex, rows, values)

    def SetValueGlobal(self, index, value):
        return _smg2s.parVectorDoubleInt_SetValueGlobal(self, index, value)

    def SetValuesGlobal(self, nindex, rows, values):
        return _smg2s.parVectorDoubleInt_SetValuesGlobal(self, nindex, rows, values)

    def SetTovalue(self, value):
        return _smg2s.parVectorDoubleInt_SetTovalue(self, value)

    def SetToZero(self):
        return _smg2s.parVectorDoubleInt_SetToZero(self)

    def VecAdd(self, v):
        return _smg2s.parVectorDoubleInt_VecAdd(self, v)

    def VecScale(self, scale):
        return _smg2s.parVectorDoubleInt_VecScale(self, scale)

    def VecDot(self, v):
        return _smg2s.parVectorDoubleInt_VecDot(self, v)

    def ReadExtVec(self, spectrum):
        return _smg2s.parVectorDoubleInt_ReadExtVec(self, spectrum)

    def VecView(self):
        return _smg2s.parVectorDoubleInt_VecView(self)

    def RestoreArray(self):
        return _smg2s.parVectorDoubleInt_RestoreArray(self)
parVectorDoubleInt_swigregister = _smg2s.parVectorDoubleInt_swigregister
parVectorDoubleInt_swigregister(parVectorDoubleInt)

class parMatrixSparseDoubleInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parMatrixSparseDoubleInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parMatrixSparseDoubleInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CSR_lloc"] = _smg2s.parMatrixSparseDoubleInt_CSR_lloc_set
    __swig_getmethods__["CSR_lloc"] = _smg2s.parMatrixSparseDoubleInt_CSR_lloc_get
    if _newclass:
        CSR_lloc = _swig_property(_smg2s.parMatrixSparseDoubleInt_CSR_lloc_get, _smg2s.parMatrixSparseDoubleInt_CSR_lloc_set)
    __swig_setmethods__["CSR_gloc"] = _smg2s.parMatrixSparseDoubleInt_CSR_gloc_set
    __swig_getmethods__["CSR_gloc"] = _smg2s.parMatrixSparseDoubleInt_CSR_gloc_get
    if _newclass:
        CSR_gloc = _swig_property(_smg2s.parMatrixSparseDoubleInt_CSR_gloc_get, _smg2s.parMatrixSparseDoubleInt_CSR_gloc_set)
    __swig_setmethods__["CSR_loc"] = _smg2s.parMatrixSparseDoubleInt_CSR_loc_set
    __swig_getmethods__["CSR_loc"] = _smg2s.parMatrixSparseDoubleInt_CSR_loc_get
    if _newclass:
        CSR_loc = _swig_property(_smg2s.parMatrixSparseDoubleInt_CSR_loc_get, _smg2s.parMatrixSparseDoubleInt_CSR_loc_set)
    __swig_setmethods__["dynmat_loc"] = _smg2s.parMatrixSparseDoubleInt_dynmat_loc_set
    __swig_getmethods__["dynmat_loc"] = _smg2s.parMatrixSparseDoubleInt_dynmat_loc_get
    if _newclass:
        dynmat_loc = _swig_property(_smg2s.parMatrixSparseDoubleInt_dynmat_loc_get, _smg2s.parMatrixSparseDoubleInt_dynmat_loc_set)

    def __init__(self, *args):
        this = _smg2s.new_parMatrixSparseDoubleInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _smg2s.delete_parMatrixSparseDoubleInt
    __del__ = lambda self: None

    def GetXMap(self):
        return _smg2s.parMatrixSparseDoubleInt_GetXMap(self)

    def GetYMap(self):
        return _smg2s.parMatrixSparseDoubleInt_GetYMap(self)

    def GetComm(self):
        return _smg2s.parMatrixSparseDoubleInt_GetComm(self)

    def GetXLowerBound(self):
        return _smg2s.parMatrixSparseDoubleInt_GetXLowerBound(self)

    def GetYLowerBound(self):
        return _smg2s.parMatrixSparseDoubleInt_GetYLowerBound(self)

    def GetXUpperBound(self):
        return _smg2s.parMatrixSparseDoubleInt_GetXUpperBound(self)

    def GetYUpperBound(self):
        return _smg2s.parMatrixSparseDoubleInt_GetYUpperBound(self)

    def GetTrueLocalSize(self, rs, cs):
        return _smg2s.parMatrixSparseDoubleInt_GetTrueLocalSize(self, rs, cs)

    def GetLocalSize(self, rs, cs):
        return _smg2s.parMatrixSparseDoubleInt_GetLocalSize(self, rs, cs)

    def GetDynMatGLobLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_GetDynMatGLobLoc(self)

    def GetDynMatGlobLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_GetDynMatGlobLoc(self)

    def GetDynMatLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_GetDynMatLoc(self)

    def GetCSRLocLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_GetCSRLocLoc(self)

    def GetCSRGlobLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_GetCSRGlobLoc(self)

    def AddValueLocal(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_AddValueLocal(self, row, col, value)

    def AddValuesLocal(self, nindex, rows, cols, values):
        return _smg2s.parMatrixSparseDoubleInt_AddValuesLocal(self, nindex, rows, cols, values)

    def AddValue(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_AddValue(self, row, col, value)

    def SetValueLocal(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_SetValueLocal(self, row, col, value)

    def SetValuesLocal(self, nindex, rows, cols, values):
        return _smg2s.parMatrixSparseDoubleInt_SetValuesLocal(self, nindex, rows, cols, values)

    def SetValue(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_SetValue(self, row, col, value)

    def GetLocalValue(self, row, col):
        return _smg2s.parMatrixSparseDoubleInt_GetLocalValue(self, row, col)

    def GetValue(self, row, col):
        return _smg2s.parMatrixSparseDoubleInt_GetValue(self, row, col)

    def glocPlusLloc(self):
        return _smg2s.parMatrixSparseDoubleInt_glocPlusLloc(self)

    def llocToGlocLoc(self):
        return _smg2s.parMatrixSparseDoubleInt_llocToGlocLoc(self)

    def MatView(self):
        return _smg2s.parMatrixSparseDoubleInt_MatView(self)

    def LOC_MatView(self):
        return _smg2s.parMatrixSparseDoubleInt_LOC_MatView(self)

    def Loc_SetValueLocal(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_Loc_SetValueLocal(self, row, col, value)

    def Loc_SetValuesLocal(self, nindex, rows, cols, values):
        return _smg2s.parMatrixSparseDoubleInt_Loc_SetValuesLocal(self, nindex, rows, cols, values)

    def Loc_SetValue(self, row, col, value):
        return _smg2s.parMatrixSparseDoubleInt_Loc_SetValue(self, row, col, value)

    def Loc_GetLocalValue(self, row, col):
        return _smg2s.parMatrixSparseDoubleInt_Loc_GetLocalValue(self, row, col)

    def Loc_GetValue(self, row, col):
        return _smg2s.parMatrixSparseDoubleInt_Loc_GetValue(self, row, col)

    def SetDiagonal(self, diag):
        return _smg2s.parMatrixSparseDoubleInt_SetDiagonal(self, diag)

    def Loc_SetDiagonal(self, diag):
        return _smg2s.parMatrixSparseDoubleInt_Loc_SetDiagonal(self, diag)

    def MatScale(self, scale):
        return _smg2s.parMatrixSparseDoubleInt_MatScale(self, scale)

    def Loc_MatScale(self, scale):
        return _smg2s.parMatrixSparseDoubleInt_Loc_MatScale(self, scale)

    def Loc_MatAXPY(self, X, scale):
        return _smg2s.parMatrixSparseDoubleInt_Loc_MatAXPY(self, X, scale)

    def Loc_MatAYPX(self, X, scale):
        return _smg2s.parMatrixSparseDoubleInt_Loc_MatAYPX(self, X, scale)

    def ReadExtMat(self):
        return _smg2s.parMatrixSparseDoubleInt_ReadExtMat(self)

    def ConvertToCSR(self):
        return _smg2s.parMatrixSparseDoubleInt_ConvertToCSR(self)

    def Loc_ConvertToCSR(self):
        return _smg2s.parMatrixSparseDoubleInt_Loc_ConvertToCSR(self)

    def ZeroEntries(self):
        return _smg2s.parMatrixSparseDoubleInt_ZeroEntries(self)

    def Loc_ZeroEntries(self):
        return _smg2s.parMatrixSparseDoubleInt_Loc_ZeroEntries(self)

    def MA(self, nilp, prod):
        return _smg2s.parMatrixSparseDoubleInt_MA(self, nilp, prod)

    def AM(self, nilp, prod):
        return _smg2s.parMatrixSparseDoubleInt_AM(self, nilp, prod)
parMatrixSparseDoubleInt_swigregister = _smg2s.parMatrixSparseDoubleInt_swigregister
parMatrixSparseDoubleInt_swigregister(parMatrixSparseDoubleInt)


def smg2sDoubleInt(probSize, nilp, lbandwidth, spectrum, comm):
    return _smg2s.smg2sDoubleInt(probSize, nilp, lbandwidth, spectrum, comm)
smg2sDoubleInt = _smg2s.smg2sDoubleInt
# This file is compatible with both classic and new-style classes.


